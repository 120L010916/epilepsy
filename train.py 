import os
import argparse
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset, random_split
from models import SeizureCNN

def train_model(X, y, epochs=20, batch_size=32, lr=0.001):
    X = (X - X.mean()) / X.std()
    X_tensor = torch.tensor(X).unsqueeze(1).float()
    y_tensor = torch.tensor(y).long()
    
    dataset = TensorDataset(X_tensor, y_tensor)
    train_size = int(0.8 * len(dataset))
    val_size = len(dataset) - train_size
    train_ds, val_ds = random_split(dataset, [train_size, val_size])
    train_loader = DataLoader(train_ds, batch_size=batch_size, shuffle=True)
    val_loader = DataLoader(val_ds, batch_size=batch_size)

    model = SeizureCNN()
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=lr)

    for epoch in range(epochs):
        model.train()
        for inputs, labels in train_loader:
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

        model.eval()
        correct, total = 0, 0
        with torch.no_grad():
            for inputs, labels in val_loader:
                outputs = model(inputs)
                predicted = torch.argmax(outputs, dim=1)
                correct += (predicted == labels).sum().item()
                total += labels.size(0)
        acc = correct / total
        print(f"Epoch {epoch+1}/{epochs}, Validation Accuracy: {acc:.4f}")

    return model

def main(args):
    for fname in os.listdir(args.input_dir):
        if fname.endswith('_features.npz'):
            fpath = os.path.join(args.input_dir, fname)
            print(f"📂 加载特征数据: {fpath}")
            data = np.load(fpath)
            X = data['F']
            y = data['y']
            model = train_model(X, y, epochs=args.epochs, batch_size=args.batch_size)
            print(f"✅ 模型训练完成: {fname}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Train CNN on CSP-based EEG features.")
    parser.add_argument('--input_dir', type=str, default='data/features', help='Directory with input .npz files')
    parser.add_argument('--epochs', type=int, default=20, help='Number of training epochs')
    parser.add_argument('--batch_size', type=int, default=32, help='Batch size for training')
    args = parser.parse_args()
    main(args)



